name: build-jar

# Cambiamos feature a la rama main
on:
  #pull_request
  push:
    branches:
      - main      # El workflow se activa para cualquier pull request en las rama main 
jobs:

# **************************************************************************
# Creación del contenedor de mysql  (MIRAR SI DEJAR O NO)
# **************************************************************************

  setup-bd:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: getTasksDone
          MYSQL_USER: getTasksDone
          MYSQL_PASSWORD: getTasksDone
        ports:
          - 3306:3306
        # Opciones para inicializar la base de datos, esquemas, etc.
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Esperar a que MySQL esté listo
        run: |
          until mysqladmin ping -h 127.0.0.1 -ugetTasksDone -pgetTasksDone --silent; do
            echo 'Esperando a que MySQL esté listo...'
            sleep 1
          done

      - name: Mostrar bases de datos
        run: |
          mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW DATABASES;"

          for db in $databases; do
            echo "Base de datos: $db"
            # Mostrar todas las tablas para cada base de datos
            mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW TABLES FROM $db;"
            # Si quieres mostrar más información, puedes añadir más comandos aquí
          done

# **************************************************************************
# Compiilación del proyecto con maven 
# **************************************************************************

  build-feature:
    needs: setup-bd
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: 'server-0.0.1-SNAPSHOT.jar'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: setup java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          # cache: maven

      - name: Cache Maven dependencias
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Imprimir versión de Java
        run: java -version

      - name: build with maven
        #run: ./mvnw clean install -DskipTests=false -e
        #mvn clean test package -DskipTests=true --batch-mode --update-snapshots      
        run: |
           ./mvnw -B package --file pom.xml
           echo ls -R target/
           echo ls -la
           
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/getTasksDone
          SPRING_DATASOURCE_USERNAME: getTasksDone
          SPRING_DATASOURCE_PASSWORD: getTasksDone

# **************************************************************************
# Creación del artefacto .jar  de nuestro proyecto compilado
# **************************************************************************

      - name: Publish Package
        if: success()
        uses: actions/upload-artifact@v3
        with:
         name: artifactjar
         path: ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}   
         run: echo '${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}'


      ######################################################## 
      # 5- Guardamos el chechsum del fichero creado
      ######################################################## 
      - name: verificar chescksum
        if: success()
        id: cal_checksum_jar
        run: |
          ls -la ${{ github.workspace }}/target/
          SHA1=$(sha1sum ${{ github.workspace }}/target/$ARTIFACT_NAME | awk '{print $1}')
          echo $SHA1
          JSON=\''{"message": "publish artifact", "artifact_name":"'"$ARTIFACT_NAME"'", "checksum": "'"$SHA1"'"}'\'
          echo JSON_PAYLOAD=$(printf '%s\n' "$JSON") >> $GITHUB_ENV

      
      ######################################################## 
      # 5- Llamada artifact
      ######################################################## 

      - name: trigger artifact
        if: success()
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: build-docker-event
          client-payload: ${{fromJSON(env.JSON_PAYLOAD) }}
