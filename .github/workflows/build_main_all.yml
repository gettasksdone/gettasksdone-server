# name: build-all

# # Cambiamos feature a la rama main
# on:
#   push:
#     branches:
#       - main      # El workflow se activa para cualquier pull request en las rama main


# jobs:

# # **************************************************************************
# # Creación del contenedor de mysql  (MIRAR SI DEJAR O NO)
# # **************************************************************************

#   # setup-bd:
#   #   runs-on: ubuntu-latest
#   #   services:
#   #     mysql:
#   #       image: mysql:8.0
#   #       env:
#   #         MYSQL_ALLOW_EMPTY_PASSWORD: true
#   #         MYSQL_DATABASE: getTasksDone
#   #         MYSQL_USER: getTasksDone
#   #         MYSQL_PASSWORD: getTasksDone
#   #       ports:
#   #         - 3306:3306
#   #       # Opciones para inicializar la base de datos, esquemas, etc.
#   #       options: >-
#   #         --health-cmd="mysqladmin ping"
#   #         --health-interval=10s
#   #         --health-timeout=5s
#   #         --health-retries=3

#   #   steps:
#   #     - name: Esperar a que MySQL esté listo
#   #       run: |
#   #         until mysqladmin ping -h 127.0.0.1 -ugetTasksDone -pgetTasksDone --silent; do
#   #           echo 'Esperando a que MySQL esté listo...'
#   #           sleep 1
#   #         done

#   #     - name: Mostrar bases de datos
#   #       run: |
#   #         mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW DATABASES;"

#   #         for db in $databases; do
#   #           echo "Base de datos: $db"
#   #           # Mostrar todas las tablas para cada base de datos
#   #           mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW TABLES FROM $db;"
#   #           # Si quieres mostrar más información, puedes añadir más comandos aquí
#   #        done

# # **************************************************************************
# # Compiilación del proyecto con maven 
# # **************************************************************************

#   build-maven:
#     #needs: setup-bd
#     runs-on: ubuntu-latest
#     env:
#       ARTIFACT_NAME: 'server-0.0.1-SNAPSHOT.jar'
#     permissions:
#       contents: write
#       packages: write

#     steps:
#       - uses: actions/checkout@v4

#       - name: setup java 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: 'temurin'
#           java-version: '17'
#           # cache: maven

#       - name: Cache Maven dependencias
#         uses: actions/cache@v4
#         with:
#           path: ~/.m2/repository
#           key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#           restore-keys: |
#             ${{ runner.os }}-maven-

#       - name: Imprimir versión de Java
#         run: java -version

#       - name: build with maven
#         #run: ./mvnw clean install -DskipTests=false -e
#         #mvn clean test package -DskipTests=true --batch-mode --update-snapshots      
#         run: |
#            ./mvnw -B package --file pom.xml
#            echo ls -R target/
#            echo ls -la
           
#         #env:
#           # SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/getTasksDone
#           # SPRING_DATASOURCE_USERNAME: getTasksDone
#           # SPRING_DATASOURCE_PASSWORD: getTasksDone

#       - name: Publish JAR Package
#         uses: actions/upload-artifact@v4
#         with:
#           name: artifactjar
#           path: ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}

#       - name: Verify Checksum
#         id: cal_checksum_jar
#         run: |
#           SHA1=$(sha1sum ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }} | awk '{print $1}')


#   build-docker:

#       needs: build-maven

#       runs-on: ubuntu-latest

#       steps:
#         - uses: actions/checkout@v4

#         - name: Download JAR Artifact
#           uses: actions/download-artifact@v4
#           with:
#             name: artifactjar
#             path: /tmp

#         - name: Set up QEMU
#           uses: docker/setup-qemu-action@v2

#         - name: Set up Docker Buildx
#           uses: docker/setup-buildx-action@v2

#         - name: Login to GitHub Container Registry
#           uses: docker/login-action@v2
#           with:
#             registry: ghcr.io
#             username: ${{ github.actor }}
#             password: ${{ secrets.GITHUB_TOKEN }}


#         - name: List current directory
#           run: ls -la

#         - name: List artifact directory
#           run: ls -la /tmp  # Asegúrate de que esto coincida con donde estás descargando tus artefactos

#         - name: Build and Push Docker Image
#           uses: docker/build-push-action@v4
#           with:
#             context: .
#             file: ./Dockerfile
#             build-args: |
#               JAR_FILE=${{ needs.build-jar.outputs.artifact_name }}
#               DB_PASSWORD=${{ secrets.DB_PASSWORD }}
#             push: true
#             tags: ghcr.io/${{ github.repository_owner }}/main