#Simplificamos los pasos para la creación del contenedor
#De esta manera se gana más agilidad en tiempo de construcción
#Si cambian las versiones @vx son más faciles de mantener

name: build-jar

# Cambiamos feature a la rama main
on:
  #pull_request
  push:
    branches:
      - dev-sso-ii      # El workflow se activa para cualquier pull request en las rama main 
jobs:

# **************************************************************************
# Creación del contenedor de mysql:
#
# Esta parte es útil para ver la conectivida con la base de datos
# con el contendor
# 
# **************************************************************************

  bd-mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: getTasksDone
          MYSQL_USER: getTasksDone
          MYSQL_PASSWORD: getTasksDone
        ports:
          - 3306:3306
        # Opciones para inicializar la base de datos, esquemas, etc.
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Esperar a que MySQL esté listo
        run: |
          until mysqladmin ping -h 127.0.0.1 -ugetTasksDone -pgetTasksDone --silent; do
            echo 'Esperando a que MySQL esté listo...'
            sleep 1
          done

      - name: Mostrar bases de datos
        run: |
          mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW DATABASES;"

          for db in $databases; do
            echo "Base de datos: $db"
            # Mostrar todas las tablas para cada base de datos
            mysql -h 127.0.0.1 -ugetTasksDone -pgetTasksDone -e "SHOW TABLES FROM $db;"
            # Si quieres mostrar más información, puedes añadir más comandos aquí
          done

# **************************************************************************
# Compilación del proyecto con maven:
# Version de java usada: java 17
# Corre en un servidor ubuntu
# **************************************************************************

  build-maven-project:
    needs: bd-mysql
    runs-on: ubuntu-latest
    env:
      ARTIFACT_NAME: 'server-0.0.1-SNAPSHOT.jar'
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: setup java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          # cache: maven

      - name: Cache Maven dependencias
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Imprimir versión de Java
        run: java -version

      - name: build with maven
        #run: ./mvnw clean install -DskipTests=false -e
        #mvn clean test package -DskipTests=true --batch-mode --update-snapshots      
        run: |
           ./mvnw -B package --file pom.xml
           echo ls -R target/
           echo ls -la
           
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/getTasksDone
          SPRING_DATASOURCE_USERNAME: getTasksDone
          SPRING_DATASOURCE_PASSWORD: getTasksDone

# **************************************************************************
# Creación del artefacto .jar  de nuestro proyecto compilado
# **************************************************************************

      - name: Publish Package
        if: success()
        uses: actions/upload-artifact@v4
        with:
         name: artifactjar
         path: ${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}   
         run: echo '${{ github.workspace }}/target/${{ env.ARTIFACT_NAME }}'
         
      - name: Output artifact ID
        run:  echo 'Artifact ID is ${{ steps.artifact-upload-step.outputs.artifact-id }}'



# **************************************************************************
# SEGUNDA FASE:
# **************************************************************************



# **************************************************************************
# Descarga del artefactor
# **************************************************************************

  download-artifact-job:

    needs: build-maven-project
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - uses: actions/download-artifact@v4
        id: download-artifact
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: workflow-gettaskdone.yml
          #workflow_conclusion: success
          #name: artifactjar
          name:  artifactjar
          path: /tmp/artifactjar
          repository: gettasksdone/gettasksdone-server
          #run-id: 

      - name: Listamos la carpeta donde esta nuestro artefacto
        run: ls -R /tmp/artifactjar/

      ####################################################### 
      #Preparamos los ficheros necesarios para construir
      #nuestro contenedor de docker donde necesitaremos:
      #1) -> Dockerfile ( nuestra rama)
      #2) -> Fichero jar (git accions)
      #######################################################
      
      - uses: actions/checkout@v4        
        if: success()
      - run: |
          echo print the current directory show files
          ls -la 
          echo preparing docker build context
          cp Dockerfile /tmp/Dockerfile
          cp -r /tmp/artifactjar/server-0.0.1-SNAPSHOT.jar /tmp/server-0.0.1-SNAPSHOT.jar
          ls -la /tmp
          

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dockerBuildContext
          path: |
            /tmp/Dockerfile
            /tmp/server-0.0.1-SNAPSHOT.jar




# **************************************************************************
# Creación del contenedor docker y publicación
# **************************************************************************

      ######################################################## 
      # 1- poder compilar las imagenes
      ######################################################## 
      - name : Set up QEMU
        uses : docker/setup-qemu-action@v2

      ######################################################## 
      # 2- Configurar docker en la maguina virtual
      #######################################################  
      - name : Set up Docker Buildx
        uses : docker/setup-buildx-action@v2

      ######################################################## 
      # 3- Login con Docker -> tambien podemos usar github packages
      ########################################################      
      - name : Login to Docker Hub
        uses : docker/login-action@v2
        with :
          registry: ghcr.io
          username: ${{ github.actor }}
          password : ${{ secrets.GITHUB_TOKEN }} 

        ######################################################## 
        # 4- Download artifact
        ######################################################## 
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: workflow-gettaskdone.yml
          name: dockerBuildContext
          path: ./dockerBuildContext
          repository: gettasksdone/gettasksdone-server


        ######################################################## 
        # 5- Lista dockerBuild
        ######################################################## 
       - name: Listamos la carpeta donde descargamos nuestro artefacto
        run: ls -R ./


        ######################################################## 
        # 6- Lista 
        ######################################################## 
      - name: Display structure of downloaded files
        run: |
          JAR_FILE=server-0.0.1-SNAPSHOT.jar
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          echo $JARFILE
          echo $DB_PASSWORD


     
        ######################################################## 
        # 7- Display structure
        ######################################################### 
      - name : Build and push image using action 
        uses : docker/build-push-action@v4 
        with :
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: workflow-gettaskdone.yml
          repository: gettasksdone/gettasksdone-server

          context : ./dockerBuildContext # Context where Dockerfile and artifact(.jar, .war ...) lives
          file : ./dockerBuildContext/Dockerfile # Where  Dockerfile is it. 
          #Parameters that our Dockerfile need.
          build-args: |      
            JAR_FILE=server-0.0.1-SNAPSHOT.jar
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          push : true # Push image to registry, false by deafult..
          #me modifico el nombre de github 
          tags : ghcr.io/${{ github.repository_owner}}/main # The image ful name, include repository, user, image name and tag 
          #tags: ghcr.io/hackingsecurity/feature:${{ github.sha }}
